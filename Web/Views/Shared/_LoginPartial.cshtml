@using Microsoft.AspNetCore.Identity

@inject SignInManager<AppUser> SignInManager
@inject UserManager<AppUser> UserManager
@if (SignInManager.IsSignedIn(User))
{
    var loggedUser = await UserManager.GetUserAsync(User);
    var roles = await UserManager.GetRolesAsync(loggedUser);
    if (roles.Any(r => r != "Customer"))
    {
        <li class="nav-item">
    <a class="nav-link" asp-controller="House" asp-action="List" id="house-link">Houses</a>
</li>
        <li class="nav-item">
    <a class="nav-link" asp-controller="Service" asp-action="List" id="service-link">Services</a>
</li>
    }
    <li class="nav-item">
    <a class="nav-link" asp-controller="Account" asp-action="Login"><i class="fas fa-user"></i></a>
</li>
    <li class="nav-item">
    <form class="form-inline" asp-controller="Account" asp-action="LogOut"
        asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
        <button type="submit" class="btn  btn-outline-primary btn-rounded my-2 my-sm-0 mx-0 mx-sm-3"
            id="log-out-btn">Logout</button>
    </form>
</li>
}
else
{
    <li class="nav-item">
    <a class="btn btn-rounded my-2 my-sm-0 mx-0 mx-sm-3" asp-controller="Account" asp-action="SignUp"
        id="sign-up-btn">Sign
        up</a>
</li>
    <li class="nav-item">
    <a class="btn btn-outline-primary btn-rounded my-2 my-sm-0" asp-controller="Account" asp-action="Login"
        id="login-btn">Login</a>
</li>
}
